#!/bin/bash

function __remux__
{
  local muxName="${1}"
  local runningMuxs="$(tmux list-sessions 2>/dev/null | cut -f1 -d:)"

  if [ -z "${muxName}" ]; then
    if [ -z "${runningMuxs}" ]; then
      printf "No muxs running.\n"
      return
    fi

    printf "Found the following muxs running:\n${runningMuxs}\n"
    return
  fi

  local intendedMuxName="$(echo ${runningMuxs} | tr ' ' '\n' | grep -i "${muxName}")"
  if [ -z "${intendedMuxName}" ]; then
    printf "Mux %s not found.\n" $muxName
    if [ -n "${runningMuxs}" ]; then
      printf "Found the following muxs running:\n${runningMuxs}\n"
    fi
    local startMux="N"
    read -r -p "Want to start a session named '${muxName}'? [y/N]: " startMux
    case "${startMux}" in
      [yY][eE][sS]|[yY])
        __newTmuxSession__ "${muxName}"
        ;;
      *)
        ;;
    esac
  else
    local numberOfMatchingMuxsFound="$(echo ${intendedMuxName} | wc -w)"
    if [ "${numberOfMatchingMuxsFound}" -eq 1 ]; then
      tmux attach -d -t "${intendedMuxName}"
    else
      printf "Found too many muxs:\n%s\n" "${intendedMuxName}"
    fi
  fi
}

function __newTmuxSession__
{
  local muxName="${1}"
  local tmuxinatorSessions="$(tmuxinator list 2>/dev/null | grep ${muxName})"
  if [ -n "${tmuxinatorSessions}" ]; then
    if [ $(wc -l <<< "${tmuxinatorSessions}") -eq "1" ]; then
      tmuxinator "${tmuxinatorSessions}"
    else
      # Untested
      printf "Too many matching projects found:\n${tmuxinatorSessions}\n"
    fi
  else
    # tmuxinator is either not installed or the project isn't available.
    tmux new -s "${muxName}"
  fi
}

__remux__ "$@"
